/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../common'
import type { VaultAddressesProvider, VaultAddressesProviderInterface } from '../VaultAddressesProvider'

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'marketId',
        type: 'string',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newAddress',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bool',
        name: 'hasProxy',
        type: 'bool',
      },
    ],
    name: 'AddressSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'newAddress',
        type: 'address',
      },
    ],
    name: 'ConfigurationAdminUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'newAddress',
        type: 'address',
      },
    ],
    name: 'EmergencyAdminUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'newAddress',
        type: 'address',
      },
    ],
    name: 'KYCAdminUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'string',
        name: 'newMarketId',
        type: 'string',
      },
    ],
    name: 'MarketIdSet',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'newAddress',
        type: 'address',
      },
    ],
    name: 'PortfolioManagerUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newAddress',
        type: 'address',
      },
    ],
    name: 'ProxyCreated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'newAddress',
        type: 'address',
      },
    ],
    name: 'VaultConfiguratorUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'newAddress',
        type: 'address',
      },
    ],
    name: 'VaultOperatorUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'newAddress',
        type: 'address',
      },
    ],
    name: 'VaultUpdated',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'getAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'getEmergencyAdmin',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'getKYCAdmin',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'getMarketId',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'getPortfolioManager',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'getVault',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'getVaultAdmin',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'getVaultConfigurator',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'getVaultOperator',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [] as any,
    name: 'renounceOwnership',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        internalType: 'address',
        name: 'newAddress',
        type: 'address',
      },
    ],
    name: 'setAddress',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        internalType: 'address',
        name: 'implementationAddress',
        type: 'address',
      },
    ],
    name: 'setAddressAsProxy',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'emergencyAdmin',
        type: 'address',
      },
    ],
    name: 'setEmergencyAdmin',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'kycAdmin',
        type: 'address',
      },
    ],
    name: 'setKYCAdmin',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'marketId',
        type: 'string',
      },
    ],
    name: 'setMarketId',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'portfolioManager',
        type: 'address',
      },
    ],
    name: 'setPortfolioManager',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'admin',
        type: 'address',
      },
    ],
    name: 'setVaultAdmin',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'configurator',
        type: 'address',
      },
    ],
    name: 'setVaultConfiguratorImpl',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'vault',
        type: 'address',
      },
    ],
    name: 'setVaultImpl',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
    ],
    name: 'setVaultOperator',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [] as any,
    stateMutability: 'nonpayable',
    type: 'function',
  },
]

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162001b7638038062001b768339810160408190526200003491620001e2565b6200003f3362000051565b6200004a81620000a1565b506200030c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051620000b6906001906020840190620000f3565b507f5e667c32fd847cf8bce48ab3400175cbf107bdc82b2dea62e3364909dfaee79981604051620000e891906200029a565b60405180910390a150565b8280546200010190620002cf565b90600052602060002090601f01602090048101928262000125576000855562000170565b82601f106200014057805160ff191683800117855562000170565b8280016001018555821562000170579182015b828111156200017057825182559160200191906001019062000153565b506200017e92915062000182565b5090565b5b808211156200017e576000815560010162000183565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001cc578181015183820152602001620001b2565b83811115620001dc576000848401525b50505050565b600060208284031215620001f557600080fd5b81516001600160401b03808211156200020d57600080fd5b818401915084601f8301126200022257600080fd5b81518181111562000237576200023762000199565b604051601f8201601f19908116603f0116810190838211818310171562000262576200026262000199565b816040528281528760208487010111156200027c57600080fd5b6200028f836020830160208801620001af565b979650505050505050565b6020815260008251806020840152620002bb816040850160208701620001af565b601f01601f19169190910160400192915050565b600181811c90821680620002e457607f821691505b602082108114156200030657634e487b7160e01b600052602260045260246000fd5b50919050565b61185a806200031c6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063666cc178116100b8578063a440b21a1161007c578063a440b21a14610254578063ca446dd914610267578063d759932b1461027a578063ddcaa9ea14610282578063f2fde38b1461028a578063f67b18471461029d57600080fd5b8063666cc17814610218578063715018a61461022b578063766ffb90146102335780638d928af81461023b5780638da5cb5b1461024357600080fd5b806321f8a7211161010a57806321f8a721146101a457806335da3394146101b7578063409f8c48146101ca578063568ef470146101dd5780635d148aef146101f25780635dcc528c1461020557600080fd5b806306a9678e14610147578063079ef0a51461016c5780630988db4c1461018157806311a417c0146101945780631ba0ae451461019c575b600080fd5b61014f6102b0565b6040516001600160a01b0390911681526020015b60405180910390f35b61017f61017a366004610db0565b6102d1565b005b61017f61018f366004610db0565b61035a565b61014f610405565b61014f610424565b61014f6101b2366004610dd2565b610439565b61017f6101c5366004610db0565b610454565b61017f6101d8366004610db0565b610503565b6101e56105ac565b6040516101639190610e38565b61017f610200366004610db0565b61063e565b61017f610213366004610e4b565b6106b1565b61017f610226366004610db0565b61072e565b61017f6107dc565b61014f610812565b61014f610829565b6000546001600160a01b031661014f565b61017f610262366004610db0565b61083c565b61017f610275366004610e4b565b6108ed565b61014f610978565b61014f610998565b61017f610298366004610db0565b6109b5565b61017f6102ab366004610e8d565b610a50565b60006102cc6d2b20aaa62a2fa7a822a920aa27a960911b610439565b905090565b6000546001600160a01b031633146103045760405162461bcd60e51b81526004016102fb90610f3e565b60405180910390fd5b610323712b20aaa62a2fa1a7a72324a3aaa920aa27a960711b82610a83565b6040516001600160a01b038216907f5df129fb98a07693c9030aa4c578c3eaa60cfde21b19b074f85c92f96576552290600090a250565b6000546001600160a01b031633146103845760405162461bcd60e51b81526004016102fb90610f3e565b6a2b20aaa62a2fa0a226a4a760a91b600090815260026020527fbcc29dca176728d6a815282ed46de40d3146c0d31ed80aff1fc62688ef2d06d880546001600160a01b0319166001600160a01b03841690811790915560405190917fc20a317155a9e7d84e06b716b4b355d47742ab9f8c5d630e7f556553f582430d91a250565b60006102cc702827a92a2327a624a7afa6a0a720a3a2a960791b610439565b60006102cc6a2b20aaa62a2fa0a226a4a760a91b5b6000908152600260205260409020546001600160a01b031690565b6000546001600160a01b0316331461047e5760405162461bcd60e51b81526004016102fb90610f3e565b6e22a6a2a923a2a721acafa0a226a4a760891b600090815260026020527f767aa9c986e1d88108b2558f00fbd21b689a0397581446e2e868cd70421026cc80546001600160a01b0319166001600160a01b03841690811790915560405190917fe19673fc861bfeb894cf2d6b7662505497ef31c0f489b742db24ee331082691691a250565b6000546001600160a01b0316331461052d5760405162461bcd60e51b81526004016102fb90610f3e565b6825aca1afa0a226a4a760b91b600090815260026020527f344e58101016a5b2a6fcfce4617a85fb4712cc1c9313cb49e800cf5010292a4580546001600160a01b0319166001600160a01b03841690811790915560405190917fa0ca161b1de377a07b59a6c960bda2feb27c9e47397c6e8e8296f4a093a1340191a250565b6060600180546105bb90610f73565b80601f01602080910402602001604051908101604052809291908181526020018280546105e790610f73565b80156106345780601f1061060957610100808354040283529160200191610634565b820191906000526020600020905b81548152906001019060200180831161061757829003601f168201915b5050505050905090565b6000546001600160a01b031633146106685760405162461bcd60e51b81526004016102fb90610f3e565b61067a64159055531560da1b82610a83565b6040516001600160a01b038216907f161584aed96e7f34998117c9ad67e2d21ff46d2a42775c22b11ed282f3c7b2cd90600090a250565b6000546001600160a01b031633146106db5760405162461bcd60e51b81526004016102fb90610f3e565b6106e58282610a83565b60408051838152600160208201526001600160a01b038316917ff2689d5d5cd0c639e137642cae5d40afced201a1a0327e7ac9358461dc9fff3191015b60405180910390a25050565b6000546001600160a01b031633146107585760405162461bcd60e51b81526004016102fb90610f3e565b6d2b20aaa62a2fa7a822a920aa27a960911b600090815260026020527f11aa854c697b6fae0b71117391eeeac25c3817acce8989391d53c855bf2905b980546001600160a01b0319166001600160a01b03841690811790915560405190917f9904206d45d9e54eca4b449fda6642c90661b9ab9a0ee84f6a4a72b8250a08ea91a250565b6000546001600160a01b031633146108065760405162461bcd60e51b81526004016102fb90610f3e565b6108106000610c50565b565b60006102cc6825aca1afa0a226a4a760b91b610439565b60006102cc64159055531560da1b610439565b6000546001600160a01b031633146108665760405162461bcd60e51b81526004016102fb90610f3e565b702827a92a2327a624a7afa6a0a720a3a2a960791b600090815260026020527ff991dd4b4f27b2245938cc19c192aef77d317d266cec2a8279ba5e7d50878ef880546001600160a01b0319166001600160a01b03841690811790915560405190917ff7b449fcd5cfb7379dcd34cb69428dd9f882033b15be33d83b42d91daa28eeb791a250565b6000546001600160a01b031633146109175760405162461bcd60e51b81526004016102fb90610f3e565b600082815260026020908152604080832080546001600160a01b0319166001600160a01b0386169081179091558151868152928301939093527ff2689d5d5cd0c639e137642cae5d40afced201a1a0327e7ac9358461dc9fff319101610722565b60006102cc712b20aaa62a2fa1a7a72324a3aaa920aa27a960711b610439565b60006102cc6e22a6a2a923a2a721acafa0a226a4a760891b610439565b6000546001600160a01b031633146109df5760405162461bcd60e51b81526004016102fb90610f3e565b6001600160a01b038116610a445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102fb565b610a4d81610c50565b50565b6000546001600160a01b03163314610a7a5760405162461bcd60e51b81526004016102fb90610f3e565b610a4d81610ca0565b6000828152600260205260408082205490513060248201526001600160a01b0390911691829160440160408051601f198184030181529190526020810180516001600160e01b031663189acdbd60e31b17905290506001600160a01b038316610be85730604051610af390610cee565b6001600160a01b039091168152602001604051809103906000f080158015610b1f573d6000803e3d6000fd5b5060405163347d5e2560e21b81529092506001600160a01b0383169063d1f5789490610b519087908590600401610fae565b600060405180830381600087803b158015610b6b57600080fd5b505af1158015610b7f573d6000803e3d6000fd5b50505060008681526002602090815260409182902080546001600160a01b0319166001600160a01b03871690811790915591518881529192507f1eb35cb4b5bbb23d152f3b4016a5a46c37a07ae930ed0956aba951e231142438910160405180910390a2610c49565b60405163278f794360e11b81526001600160a01b03831690634f1ef28690610c169087908590600401610fae565b600060405180830381600087803b158015610c3057600080fd5b505af1158015610c44573d6000803e3d6000fd5b505050505b5050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051610cb3906001906020840190610cfb565b507f5e667c32fd847cf8bce48ab3400175cbf107bdc82b2dea62e3364909dfaee79981604051610ce39190610e38565b60405180910390a150565b61084a80610fdb83390190565b828054610d0790610f73565b90600052602060002090601f016020900481019282610d295760008555610d6f565b82601f10610d4257805160ff1916838001178555610d6f565b82800160010185558215610d6f579182015b82811115610d6f578251825591602001919060010190610d54565b50610d7b929150610d7f565b5090565b5b80821115610d7b5760008155600101610d80565b80356001600160a01b0381168114610dab57600080fd5b919050565b600060208284031215610dc257600080fd5b610dcb82610d94565b9392505050565b600060208284031215610de457600080fd5b5035919050565b6000815180845260005b81811015610e1157602081850181015186830182015201610df5565b81811115610e23576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610dcb6020830184610deb565b60008060408385031215610e5e57600080fd5b82359150610e6e60208401610d94565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610e9f57600080fd5b813567ffffffffffffffff80821115610eb757600080fd5b818401915084601f830112610ecb57600080fd5b813581811115610edd57610edd610e77565b604051601f8201601f19908116603f01168101908382118183101715610f0557610f05610e77565b81604052828152876020848701011115610f1e57600080fd5b826020860160208301376000928101602001929092525095945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c90821680610f8757607f821691505b60208210811415610fa857634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b0383168152604060208201819052600090610fd290830184610deb565b94935050505056fe60a060405234801561001057600080fd5b5060405161084a38038061084a83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161079c6100ae600039600081816101130152818161015801528181610211015281816103510152818161037a015261049e015261079c6000f3fe60806040526004361061004a5760003560e01c80633659cfe6146100545780634f1ef286146100745780635c60da1b14610087578063d1f57894146100b8578063f851a440146100cb575b6100526100e0565b005b34801561006057600080fd5b5061005261006f366004610543565b610108565b610052610082366004610565565b61014d565b34801561009357600080fd5b5061009c610204565b6040516001600160a01b03909116815260200160405180910390f35b6100526100c63660046105fe565b610256565b3480156100d757600080fd5b5061009c610344565b6100e861039c565b6101066101016000805160206107478339815191525490565b6103a4565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561014557610142816103c8565b50565b6101426100e0565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101f757610187836103c8565b6000836001600160a01b031683836040516101a39291906106c0565b600060405180830381855af49150503d80600081146101de576040519150601f19603f3d011682016040523d82523d6000602084013e6101e3565b606091505b50509050806101f157600080fd5b50505050565b6101ff6100e0565b505050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561024b57506000805160206107478339815191525490565b6102536100e0565b90565b600061026e6000805160206107478339815191525490565b6001600160a01b03161461028157600080fd5b6102ac60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6106d0565b600080516020610747833981519152146102c8576102c86106f5565b6102d182610408565b805115610340576000826001600160a01b0316826040516102f2919061070b565b600060405180830381855af49150503d806000811461032d576040519150601f19603f3d011682016040523d82523d6000602084013e610332565b606091505b50509050806101ff57600080fd5b5050565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561024b57507f000000000000000000000000000000000000000000000000000000000000000090565b610106610493565b3660008037600080366000845af43d6000803e8080156103c3573d6000f35b3d6000fd5b6103d181610408565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b803b6104815760405162461bcd60e51b815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e74726163742061646472657373000000000060648201526084015b60405180910390fd5b60008051602061074783398151915255565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101065760405162461bcd60e51b815260206004820152603260248201527f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667260448201527137b6903a343290383937bc3c9030b236b4b760711b6064820152608401610478565b80356001600160a01b038116811461053e57600080fd5b919050565b60006020828403121561055557600080fd5b61055e82610527565b9392505050565b60008060006040848603121561057a57600080fd5b61058384610527565b9250602084013567ffffffffffffffff808211156105a057600080fd5b818601915086601f8301126105b457600080fd5b8135818111156105c357600080fd5b8760208285010111156105d557600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561061157600080fd5b61061a83610527565b9150602083013567ffffffffffffffff8082111561063757600080fd5b818501915085601f83011261064b57600080fd5b81358181111561065d5761065d6105e8565b604051601f8201601f19908116603f01168101908382118183101715610685576106856105e8565b8160405282815288602084870101111561069e57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b8183823760009101908152919050565b6000828210156106f057634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6000825160005b8181101561072c5760208186018101518583015201610712565b8181111561073b576000828501525b50919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220da8377213e8c600ec5301a1e6bd2f4f5cf7cfe5474ad7981fe546f74eab0ce9b64736f6c63430008090033a26469706673582212209ef1ebe970c1dd6c669dac57baa768a8afb149bc07ffdff19ac6e905a827a40364736f6c63430008090033'

type VaultAddressesProviderConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: VaultAddressesProviderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class VaultAddressesProvider__factory extends ContractFactory {
  constructor(...args: VaultAddressesProviderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(
    marketId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<VaultAddressesProvider> {
    return super.deploy(marketId, overrides || {}) as Promise<VaultAddressesProvider>
  }
  override getDeployTransaction(
    marketId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(marketId, overrides || {})
  }
  override attach(address: string): VaultAddressesProvider {
    return super.attach(address) as VaultAddressesProvider
  }
  override connect(signer: Signer): VaultAddressesProvider__factory {
    return super.connect(signer) as VaultAddressesProvider__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): VaultAddressesProviderInterface {
    return new utils.Interface(_abi) as VaultAddressesProviderInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): VaultAddressesProvider {
    return new Contract(address, _abi, signerOrProvider) as VaultAddressesProvider
  }
}
